import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';
import { EMPTY, Observable, throwError } from 'rxjs';
import { catchError, switchMap, tap } from 'rxjs/operators';
import { AuthService } from '../services/auth.service';
import { Router } from '@angular/router';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    if (!sessionStorage.getItem('accessToken')) {
      console.log('User session expired. Redirecting to login.');
      this.router.navigate(['/login']);
      return EMPTY;
      // if (!request.url.includes('/login') && !request.url.includes('/refresh')) {
      //   console.log('No access token found. Redirecting to login.');
      //   this.router.navigate(['/login']);
      //   return EMPTY;
      // }
    }
    const accessToken = this.authService.getAccessToken();

    if (accessToken) {
      request = request.clone({
        setHeaders: {
          Authorization: `Bearer ${accessToken}`,
        },
        withCredentials: true,
      });
    } else {
      request = request.clone({
        withCredentials: true,
      });
    }

    return next.handle(request).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error.status === 401 && accessToken) {
          return this.authService.refreshAccessToken().pipe(
            tap((newToken) => console.log('New token generated by interceptor request', newToken)),
            switchMap((newToken) => {
              this.authService.setAccessToken(newToken);
              const newReq = request.clone({
                setHeaders: {
                  Authorization: `Bearer ${newToken}`,
                },
              });
              return next.handle(newReq);
            }),
            catchError((refreshError) => {
              console.error('Failed to refresh accessToken', refreshError);
              this.authService.logout();
              this.router.navigate(['/login']);
              return throwError(() => refreshError);
            })
          );
        }
        return throwError(() => error);
      })
    );
  }
}